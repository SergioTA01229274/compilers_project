Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> IDEC NAME
Rule 2     statement -> IDEC NAME ASSIGN expression
Rule 3     statement -> FDEC NAME
Rule 4     statement -> FDEC NAME ASSIGN expression
Rule 5     statement -> PRINT expression
Rule 6     expression -> INUMBER
Rule 7     expression -> FNUMBER
Rule 8     statement -> NAME ASSIGN expression
Rule 9     expression -> expression PLUS expression
Rule 10    expression -> expression MINUS expression
Rule 11    expression -> - expression
Rule 12    expression -> ( expression )
Rule 13    expression -> NAME

Terminals, with rules where they appear

(                    : 12
)                    : 12
-                    : 11
ASSIGN               : 2 4 8
FDEC                 : 3 4
FNUMBER              : 7
IDEC                 : 1 2
INUMBER              : 6
MINUS                : 10
NAME                 : 1 2 3 4 8 13
PLUS                 : 9
PRINT                : 5
error                : 

Nonterminals, with rules where they appear

expression           : 2 4 5 8 9 9 10 10 11 12
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . IDEC NAME
    (2) statement -> . IDEC NAME ASSIGN expression
    (3) statement -> . FDEC NAME
    (4) statement -> . FDEC NAME ASSIGN expression
    (5) statement -> . PRINT expression
    (8) statement -> . NAME ASSIGN expression

    IDEC            shift and go to state 2
    FDEC            shift and go to state 4
    PRINT           shift and go to state 5
    NAME            shift and go to state 3

    statement                      shift and go to state 1

state 1

    (0) S' -> statement .



state 2

    (1) statement -> IDEC . NAME
    (2) statement -> IDEC . NAME ASSIGN expression

    NAME            shift and go to state 6


state 3

    (8) statement -> NAME . ASSIGN expression

    ASSIGN          shift and go to state 7


state 4

    (3) statement -> FDEC . NAME
    (4) statement -> FDEC . NAME ASSIGN expression

    NAME            shift and go to state 8


state 5

    (5) statement -> PRINT . expression
    (6) expression -> . INUMBER
    (7) expression -> . FNUMBER
    (9) expression -> . expression PLUS expression
    (10) expression -> . expression MINUS expression
    (11) expression -> . - expression
    (12) expression -> . ( expression )
    (13) expression -> . NAME

    INUMBER         shift and go to state 10
    FNUMBER         shift and go to state 11
    -               shift and go to state 12
    (               shift and go to state 13
    NAME            shift and go to state 14

    expression                     shift and go to state 9

state 6

    (1) statement -> IDEC NAME .
    (2) statement -> IDEC NAME . ASSIGN expression

    $end            reduce using rule 1 (statement -> IDEC NAME .)
    ASSIGN          shift and go to state 15


state 7

    (8) statement -> NAME ASSIGN . expression
    (6) expression -> . INUMBER
    (7) expression -> . FNUMBER
    (9) expression -> . expression PLUS expression
    (10) expression -> . expression MINUS expression
    (11) expression -> . - expression
    (12) expression -> . ( expression )
    (13) expression -> . NAME

    INUMBER         shift and go to state 10
    FNUMBER         shift and go to state 11
    -               shift and go to state 12
    (               shift and go to state 13
    NAME            shift and go to state 14

    expression                     shift and go to state 16

state 8

    (3) statement -> FDEC NAME .
    (4) statement -> FDEC NAME . ASSIGN expression

    $end            reduce using rule 3 (statement -> FDEC NAME .)
    ASSIGN          shift and go to state 17


state 9

    (5) statement -> PRINT expression .
    (9) expression -> expression . PLUS expression
    (10) expression -> expression . MINUS expression

    $end            reduce using rule 5 (statement -> PRINT expression .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19


state 10

    (6) expression -> INUMBER .

    PLUS            reduce using rule 6 (expression -> INUMBER .)
    MINUS           reduce using rule 6 (expression -> INUMBER .)
    $end            reduce using rule 6 (expression -> INUMBER .)
    )               reduce using rule 6 (expression -> INUMBER .)


state 11

    (7) expression -> FNUMBER .

    PLUS            reduce using rule 7 (expression -> FNUMBER .)
    MINUS           reduce using rule 7 (expression -> FNUMBER .)
    $end            reduce using rule 7 (expression -> FNUMBER .)
    )               reduce using rule 7 (expression -> FNUMBER .)


state 12

    (11) expression -> - . expression
    (6) expression -> . INUMBER
    (7) expression -> . FNUMBER
    (9) expression -> . expression PLUS expression
    (10) expression -> . expression MINUS expression
    (11) expression -> . - expression
    (12) expression -> . ( expression )
    (13) expression -> . NAME

    INUMBER         shift and go to state 10
    FNUMBER         shift and go to state 11
    -               shift and go to state 12
    (               shift and go to state 13
    NAME            shift and go to state 14

    expression                     shift and go to state 20

state 13

    (12) expression -> ( . expression )
    (6) expression -> . INUMBER
    (7) expression -> . FNUMBER
    (9) expression -> . expression PLUS expression
    (10) expression -> . expression MINUS expression
    (11) expression -> . - expression
    (12) expression -> . ( expression )
    (13) expression -> . NAME

    INUMBER         shift and go to state 10
    FNUMBER         shift and go to state 11
    -               shift and go to state 12
    (               shift and go to state 13
    NAME            shift and go to state 14

    expression                     shift and go to state 21

state 14

    (13) expression -> NAME .

    PLUS            reduce using rule 13 (expression -> NAME .)
    MINUS           reduce using rule 13 (expression -> NAME .)
    $end            reduce using rule 13 (expression -> NAME .)
    )               reduce using rule 13 (expression -> NAME .)


state 15

    (2) statement -> IDEC NAME ASSIGN . expression
    (6) expression -> . INUMBER
    (7) expression -> . FNUMBER
    (9) expression -> . expression PLUS expression
    (10) expression -> . expression MINUS expression
    (11) expression -> . - expression
    (12) expression -> . ( expression )
    (13) expression -> . NAME

    INUMBER         shift and go to state 10
    FNUMBER         shift and go to state 11
    -               shift and go to state 12
    (               shift and go to state 13
    NAME            shift and go to state 14

    expression                     shift and go to state 22

state 16

    (8) statement -> NAME ASSIGN expression .
    (9) expression -> expression . PLUS expression
    (10) expression -> expression . MINUS expression

    $end            reduce using rule 8 (statement -> NAME ASSIGN expression .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19


state 17

    (4) statement -> FDEC NAME ASSIGN . expression
    (6) expression -> . INUMBER
    (7) expression -> . FNUMBER
    (9) expression -> . expression PLUS expression
    (10) expression -> . expression MINUS expression
    (11) expression -> . - expression
    (12) expression -> . ( expression )
    (13) expression -> . NAME

    INUMBER         shift and go to state 10
    FNUMBER         shift and go to state 11
    -               shift and go to state 12
    (               shift and go to state 13
    NAME            shift and go to state 14

    expression                     shift and go to state 23

state 18

    (9) expression -> expression PLUS . expression
    (6) expression -> . INUMBER
    (7) expression -> . FNUMBER
    (9) expression -> . expression PLUS expression
    (10) expression -> . expression MINUS expression
    (11) expression -> . - expression
    (12) expression -> . ( expression )
    (13) expression -> . NAME

    INUMBER         shift and go to state 10
    FNUMBER         shift and go to state 11
    -               shift and go to state 12
    (               shift and go to state 13
    NAME            shift and go to state 14

    expression                     shift and go to state 24

state 19

    (10) expression -> expression MINUS . expression
    (6) expression -> . INUMBER
    (7) expression -> . FNUMBER
    (9) expression -> . expression PLUS expression
    (10) expression -> . expression MINUS expression
    (11) expression -> . - expression
    (12) expression -> . ( expression )
    (13) expression -> . NAME

    INUMBER         shift and go to state 10
    FNUMBER         shift and go to state 11
    -               shift and go to state 12
    (               shift and go to state 13
    NAME            shift and go to state 14

    expression                     shift and go to state 25

state 20

    (11) expression -> - expression .
    (9) expression -> expression . PLUS expression
    (10) expression -> expression . MINUS expression

    PLUS            reduce using rule 11 (expression -> - expression .)
    MINUS           reduce using rule 11 (expression -> - expression .)
    $end            reduce using rule 11 (expression -> - expression .)
    )               reduce using rule 11 (expression -> - expression .)

  ! PLUS            [ shift and go to state 18 ]
  ! MINUS           [ shift and go to state 19 ]


state 21

    (12) expression -> ( expression . )
    (9) expression -> expression . PLUS expression
    (10) expression -> expression . MINUS expression

    )               shift and go to state 26
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19


state 22

    (2) statement -> IDEC NAME ASSIGN expression .
    (9) expression -> expression . PLUS expression
    (10) expression -> expression . MINUS expression

    $end            reduce using rule 2 (statement -> IDEC NAME ASSIGN expression .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19


state 23

    (4) statement -> FDEC NAME ASSIGN expression .
    (9) expression -> expression . PLUS expression
    (10) expression -> expression . MINUS expression

    $end            reduce using rule 4 (statement -> FDEC NAME ASSIGN expression .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19


state 24

    (9) expression -> expression PLUS expression .
    (9) expression -> expression . PLUS expression
    (10) expression -> expression . MINUS expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    $end            reduce using rule 9 (expression -> expression PLUS expression .)
    )               reduce using rule 9 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19

  ! PLUS            [ reduce using rule 9 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 9 (expression -> expression PLUS expression .) ]


state 25

    (10) expression -> expression MINUS expression .
    (9) expression -> expression . PLUS expression
    (10) expression -> expression . MINUS expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    $end            reduce using rule 10 (expression -> expression MINUS expression .)
    )               reduce using rule 10 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19

  ! PLUS            [ reduce using rule 10 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 10 (expression -> expression MINUS expression .) ]


state 26

    (12) expression -> ( expression ) .

    PLUS            reduce using rule 12 (expression -> ( expression ) .)
    MINUS           reduce using rule 12 (expression -> ( expression ) .)
    $end            reduce using rule 12 (expression -> ( expression ) .)
    )               reduce using rule 12 (expression -> ( expression ) .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 24 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 24 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 25 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 25 resolved as shift
